/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { Context } from './../context';

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  EducationInput: {
    // input type
    title: string; // String!
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  Competency: {
    // root type
    id: string; // ID!
    parentCompetencyId?: string | null; // String
  };
  Education: {
    // root type
    id: string; // ID!
  };
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['Competency'] | NexusGenRootTypes['Education'];
}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  Competency: {
    // field return type
    id: string; // ID!
    parentCompetencyId: string | null; // String
    title: string; // String!
  };
  Education: {
    // field return type
    id: string; // ID!
    title: string; // String!
  };
  Mutation: {
    // field return type
    createEducation: NexusGenRootTypes['Education']; // Education!
    deleteEducation: NexusGenRootTypes['Education']; // Education!
    updateEducation: NexusGenRootTypes['Education']; // Education!
  };
  Query: {
    // field return type
    competencies: NexusGenRootTypes['Competency'][]; // [Competency!]!
    educations: NexusGenRootTypes['Education'][]; // [Education!]!
  };
  Node: {
    // field return type
    id: string; // ID!
  };
}

export interface NexusGenFieldTypeNames {
  Competency: {
    // field return type name
    id: 'ID';
    parentCompetencyId: 'String';
    title: 'String';
  };
  Education: {
    // field return type name
    id: 'ID';
    title: 'String';
  };
  Mutation: {
    // field return type name
    createEducation: 'Education';
    deleteEducation: 'Education';
    updateEducation: 'Education';
  };
  Query: {
    // field return type name
    competencies: 'Competency';
    educations: 'Education';
  };
  Node: {
    // field return type name
    id: 'ID';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createEducation: {
      // args
      data: NexusGenInputs['EducationInput']; // EducationInput!
    };
    deleteEducation: {
      // args
      id: string; // ID!
    };
    updateEducation: {
      // args
      data: NexusGenInputs['EducationInput']; // EducationInput!
      id: string; // ID!
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  Node: 'Competency' | 'Education';
}

export interface NexusGenTypeInterfaces {
  Competency: 'Node';
  Education: 'Node';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: false;
    __typename: false;
    isTypeOf: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
