/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { Context } from './../schema/context';
import type { BaseErrorModel } from './../schema/types/errors';
import type { NodeModel } from './../schema/types/interfaces';
import type { CompetencyModel, EducationModel } from './../domain/source-types';
import type {
  CreateCompetencyPayloadModel,
  RenameCompetencyPayloadModel,
} from './../schema/types/competency';
import type { Person } from '@prisma/client';
import type { core } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "DateTime";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateCompetencyInput: {
    // input type
    parentId?: string | null; // ID
    title: string; // String!
  };
  EducationInput: {
    // input type
    title: string; // String!
  };
  RenameCompetencyInput: {
    // input type
    title: string; // String!
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenObjects {
  Competency: CompetencyModel;
  CreateCompetencySuccessPayload: {
    // root type
    competency: NexusGenRootTypes['Competency']; // Competency!
  };
  Education: EducationModel;
  InputError: BaseErrorModel;
  Mutation: {};
  Query: {};
  RenameCompetencySuccessPayload: {
    // root type
    competency: NexusGenRootTypes['Competency']; // Competency!
  };
  Teacher: Person;
}

export interface NexusGenInterfaces {
  Accountable: NexusGenRootTypes['Competency'] | NexusGenRootTypes['Education'];
  BaseError: NexusGenRootTypes['InputError'];
  Node: NodeModel;
  Person: NexusGenRootTypes['Teacher'];
}

export interface NexusGenUnions {
  CreateCompetencyPayload: CreateCompetencyPayloadModel;
  RenameCompetencyPayload: RenameCompetencyPayloadModel;
}

export type NexusGenRootTypes = NexusGenInterfaces &
  NexusGenObjects &
  NexusGenUnions;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  Competency: {
    // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy: NexusGenRootTypes['Person']; // Person!
    id: string; // ID!
    parent: NexusGenRootTypes['Competency'] | null; // Competency
    subCompetencies: NexusGenRootTypes['Competency'][] | null; // [Competency!]
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    updatedBy: NexusGenRootTypes['Person']; // Person!
  };
  CreateCompetencySuccessPayload: {
    // field return type
    competency: NexusGenRootTypes['Competency']; // Competency!
  };
  Education: {
    // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy: NexusGenRootTypes['Person']; // Person!
    id: string; // ID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    updatedBy: NexusGenRootTypes['Person']; // Person!
  };
  InputError: {
    // field return type
    code: string; // String!
    message: string; // String!
    path: string[] | null; // [String!]
  };
  Mutation: {
    // field return type
    createCompetency: NexusGenRootTypes['CreateCompetencyPayload']; // CreateCompetencyPayload!
    createEducation: NexusGenRootTypes['Education'] | null; // Education
    deleteCompetency: NexusGenRootTypes['Competency'] | null; // Competency
    deleteEducation: NexusGenRootTypes['Education'] | null; // Education
    renameCompetency: NexusGenRootTypes['RenameCompetencyPayload']; // RenameCompetencyPayload!
    updateEducation: NexusGenRootTypes['Education'] | null; // Education
  };
  Query: {
    // field return type
    allEducations: NexusGenRootTypes['Education'][]; // [Education!]!
    allPeople: NexusGenRootTypes['Person'][]; // [Person!]!
    allRootCompetencies: NexusGenRootTypes['Competency'][]; // [Competency!]!
    competency: NexusGenRootTypes['Competency'] | null; // Competency
  };
  RenameCompetencySuccessPayload: {
    // field return type
    competency: NexusGenRootTypes['Competency']; // Competency!
  };
  Teacher: {
    // field return type
    displayName: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
  };
  Accountable: {
    // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy: NexusGenRootTypes['Person']; // Person!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    updatedBy: NexusGenRootTypes['Person']; // Person!
  };
  BaseError: {
    // field return type
    code: string; // String!
    message: string; // String!
    path: string[] | null; // [String!]
  };
  Node: {
    // field return type
    id: string; // ID!
  };
  Person: {
    // field return type
    displayName: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
  };
}

export interface NexusGenFieldTypeNames {
  Competency: {
    // field return type name
    createdAt: 'DateTime';
    createdBy: 'Person';
    id: 'ID';
    parent: 'Competency';
    subCompetencies: 'Competency';
    title: 'String';
    updatedAt: 'DateTime';
    updatedBy: 'Person';
  };
  CreateCompetencySuccessPayload: {
    // field return type name
    competency: 'Competency';
  };
  Education: {
    // field return type name
    createdAt: 'DateTime';
    createdBy: 'Person';
    id: 'ID';
    title: 'String';
    updatedAt: 'DateTime';
    updatedBy: 'Person';
  };
  InputError: {
    // field return type name
    code: 'String';
    message: 'String';
    path: 'String';
  };
  Mutation: {
    // field return type name
    createCompetency: 'CreateCompetencyPayload';
    createEducation: 'Education';
    deleteCompetency: 'Competency';
    deleteEducation: 'Education';
    renameCompetency: 'RenameCompetencyPayload';
    updateEducation: 'Education';
  };
  Query: {
    // field return type name
    allEducations: 'Education';
    allPeople: 'Person';
    allRootCompetencies: 'Competency';
    competency: 'Competency';
  };
  RenameCompetencySuccessPayload: {
    // field return type name
    competency: 'Competency';
  };
  Teacher: {
    // field return type name
    displayName: 'String';
    firstName: 'String';
    id: 'ID';
    lastName: 'String';
  };
  Accountable: {
    // field return type name
    createdAt: 'DateTime';
    createdBy: 'Person';
    updatedAt: 'DateTime';
    updatedBy: 'Person';
  };
  BaseError: {
    // field return type name
    code: 'String';
    message: 'String';
    path: 'String';
  };
  Node: {
    // field return type name
    id: 'ID';
  };
  Person: {
    // field return type name
    displayName: 'String';
    firstName: 'String';
    id: 'ID';
    lastName: 'String';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createCompetency: {
      // args
      data: NexusGenInputs['CreateCompetencyInput']; // CreateCompetencyInput!
    };
    createEducation: {
      // args
      data: NexusGenInputs['EducationInput']; // EducationInput!
    };
    deleteCompetency: {
      // args
      id: string; // ID!
    };
    deleteEducation: {
      // args
      id: string; // ID!
    };
    renameCompetency: {
      // args
      data: NexusGenInputs['RenameCompetencyInput']; // RenameCompetencyInput!
      id: string; // ID!
    };
    updateEducation: {
      // args
      data: NexusGenInputs['EducationInput']; // EducationInput!
      id: string; // ID!
    };
  };
  Query: {
    competency: {
      // args
      id: string; // ID!
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  CreateCompetencyPayload: 'CreateCompetencySuccessPayload' | 'InputError';
  RenameCompetencyPayload: 'InputError' | 'RenameCompetencySuccessPayload';
  Accountable: 'Competency' | 'Education';
  BaseError: 'InputError';
  Node: 'Competency' | 'Education' | 'Teacher';
  Person: 'Teacher';
}

export interface NexusGenTypeInterfaces {
  Competency: 'Accountable' | 'Node';
  Education: 'Accountable' | 'Node';
  InputError: 'BaseError';
  Teacher: 'Node' | 'Person';
  Person: 'Node';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType =
  | 'Accountable'
  | 'BaseError'
  | 'CreateCompetencyPayload'
  | 'Node'
  | 'Person'
  | 'RenameCompetencyPayload';

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
