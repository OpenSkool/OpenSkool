### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
An accountable resource tracks when and by whom it was created and last updated.
"""
interface Accountable {
  createdAt: DateTime!
  createdBy: Person!
  updatedAt: DateTime!
  updatedBy: Person!
}

interface BaseError {
  code: String!
  message: String!
  path: [String!]
}

"""
A competency can be an individual competence or a grouping of competences.
"""
type Competency implements Accountable & Node {
  competencyFramework: CompetencyFramework!
  createdAt: DateTime!
  createdBy: Person!

  """
  A CUID for a resource
  """
  id: ID!
  parent: Competency
  subCompetencies: [Competency!]
  title: String!
  updatedAt: DateTime!
  updatedBy: Person!
}

type CompetencyFramework implements Node {
  competencies: [Competency!]!

  """
  A CUID for a resource
  """
  id: ID!
  title: String!
}

input CreateCompetencyFrameworkInput {
  title: String!
}

union CreateCompetencyFrameworkPayload =
    CreateCompetencyFrameworkSuccessPayload
  | InputError

type CreateCompetencyFrameworkSuccessPayload {
  competencyFramework: CompetencyFramework!
}

input CreateCompetencyInput {
  parentId: ID
  title: String!
}

union CreateCompetencyPayload = CreateCompetencySuccessPayload | InputError

type CreateCompetencySuccessPayload {
  competency: Competency!
}

input CreateNestedCompetencyInput {
  parentId: ID!
  title: String!
}

input CreateRootCompetencyInput {
  frameworkId: ID!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Education implements Accountable & Node {
  createdAt: DateTime!
  createdBy: Person!

  """
  A CUID for a resource
  """
  id: ID!
  title: String!
  updatedAt: DateTime!
  updatedBy: Person!
}

input EducationInput {
  title: String!
}

type InputError implements BaseError {
  code: String!
  message: String!
  path: [String!]
}

type Mutation {
  createCompetency(data: CreateCompetencyInput!): CreateCompetencyPayload!
  createCompetencyFramework(
    data: CreateCompetencyFrameworkInput!
  ): CreateCompetencyFrameworkPayload!
  createEducation(data: EducationInput!): Education
  createNestedCompetency(
    data: CreateNestedCompetencyInput!
  ): CreateCompetencyPayload!
  createRootCompetency(
    data: CreateRootCompetencyInput!
  ): CreateCompetencyPayload!
  deleteCompetency(id: ID!): Competency
  deleteEducation(id: ID!): Education
  renameCompetency(
    data: RenameCompetencyInput!
    id: ID!
  ): RenameCompetencyPayload!
  updateEducation(data: EducationInput!, id: ID!): Education
}

"""
A node is any resource that can be identified via an ID.
"""
interface Node {
  """
  A CUID for a resource
  """
  id: ID!
}

interface Person implements Node {
  displayName: String!
  firstName: String!

  """
  A CUID for a resource
  """
  id: ID!
  lastName: String!
}

type Query {
  allCompetencyFrameworks: [CompetencyFramework!]!
  allEducations: [Education!]!
  allPeople: [Person!]!
  allRootCompetencies: [Competency!]!
  competency(id: ID!): Competency
}

input RenameCompetencyInput {
  title: String!
}

union RenameCompetencyPayload = InputError | RenameCompetencySuccessPayload

type RenameCompetencySuccessPayload {
  competency: Competency!
}

type Teacher implements Node & Person {
  displayName: String!
  firstName: String!

  """
  A CUID for a resource
  """
  id: ID!
  lastName: String!
}
