### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
An accountable resource tracks when and by whom it was created and last updated.
"""
interface Accountable {
  createdAt: Date!
  updatedAt: Date!
}

"""
A competency can be an individual competence or a grouping of competences.
"""
interface Competency implements Accountable & Node {
  createdAt: Date!

  """
  A CUID for a resource
  """
  id: ID!
  title: String!
  updatedAt: Date!
}

scalar Date

type Education implements Accountable & Node {
  createdAt: Date!

  """
  A CUID for a resource
  """
  id: ID!
  title: String!
  updatedAt: Date!
}

input EducationInput {
  title: String!
}

type Mutation {
  createEducation(data: EducationInput!): Education!
  deleteEducation(id: ID!): Node!
  updateEducation(data: EducationInput!, id: ID!): Education!
}

"""
A competency with a parent.
"""
type NestedCompetency implements Accountable & Competency & Node {
  createdAt: Date!

  """
  A CUID for a resource
  """
  id: ID!
  parentId: ID!
  title: String!
  updatedAt: Date!
}

"""
A node is any resource that can be identified via an ID.
"""
interface Node {
  """
  A CUID for a resource
  """
  id: ID!
}

type Query {
  allEducations: [Education!]!
  rootCompetency(id: ID!): RootCompetency
}

"""
A competency without a parent.
"""
type RootCompetency implements Accountable & Competency & Node {
  createdAt: Date!

  """
  A CUID for a resource
  """
  id: ID!
  nestedCompetencies: [NestedCompetency!]!
  title: String!
  updatedAt: Date!
}
