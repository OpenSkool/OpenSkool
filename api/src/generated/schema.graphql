"""
An accountable resource tracks when and by whom it was created and last updated.
"""
interface Accountable {
  createdAt: DateTime!
  createdBy: Person!
  updatedAt: DateTime!
  updatedBy: Person!
}

"""
A competency can be an individual competence or a grouping of competences.
"""
type Competency implements Accountable & Node {
  competencyFramework: CompetencyFramework
  createdAt: DateTime!
  createdBy: Person!

  """
  A CUID for a resource
  """
  id: ID!
  parent: Competency
  subCompetencies: [Competency!]
  title: String!
  updatedAt: DateTime!
  updatedBy: Person!
}

type CompetencyFramework implements Node {
  competencies: [Competency!]!

  """
  A CUID for a resource
  """
  id: ID!
  title: String!
}

input CreateCompetencyFrameworkInput {
  title: String!
}

input CreateCompetencyInput {
  parentId: ID
  title: String!
}

input CreateNestedCompetencyInput {
  parentId: ID!
  title: String!
}

input CreateRootCompetencyInput {
  frameworkId: ID!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Education implements Accountable & Node {
  createdAt: DateTime!
  createdBy: Person!

  """
  A CUID for a resource
  """
  id: ID!
  title: String!
  updatedAt: DateTime!
  updatedBy: Person!
}

input EducationInput {
  title: String!
}

type InputError implements UserError {
  code: String!
  message: String!
  path: [String!]
}

type Mutation {
  createCompetency(
    data: CreateCompetencyInput!
  ): MutationCreateCompetencyResult!
  createCompetencyFramework(
    data: CreateCompetencyFrameworkInput!
  ): MutationCreateCompetencyFrameworkResult!
  createEducation(data: EducationInput!): MutationCreateEducationResult!
  createNestedCompetency(
    data: CreateNestedCompetencyInput!
  ): MutationCreateNestedCompetencyResult!
  createRootCompetency(
    data: CreateRootCompetencyInput!
  ): MutationCreateRootCompetencyResult!
  deleteCompetency(id: ID!): Competency
  deleteEducation(id: ID!): MutationDeleteEducationResult!
  renameCompetency(
    data: RenameCompetencyInput!
    id: ID!
  ): MutationRenameCompetencyResult!
  swapCompetencies(
    leftCompetencyId: ID!
    rightCompetencyId: ID!
  ): MutationSwapCompetenciesResult!
  updateEducation(
    data: EducationInput!
    id: ID!
  ): MutationUpdateEducationResult!
}

union MutationCreateCompetencyFrameworkResult =
    InputError
  | MutationCreateCompetencyFrameworkSuccess
  | UnauthorizedError

type MutationCreateCompetencyFrameworkSuccess {
  data: CompetencyFramework!
}

union MutationCreateCompetencyResult =
    InputError
  | MutationCreateCompetencySuccess

type MutationCreateCompetencySuccess {
  data: Competency!
}

union MutationCreateEducationResult = MutationCreateEducationSuccess

type MutationCreateEducationSuccess {
  data: Education!
}

union MutationCreateNestedCompetencyResult =
    InputError
  | MutationCreateNestedCompetencySuccess
  | UnauthorizedError

type MutationCreateNestedCompetencySuccess {
  data: Competency!
}

union MutationCreateRootCompetencyResult =
    InputError
  | MutationCreateRootCompetencySuccess
  | UnauthorizedError

type MutationCreateRootCompetencySuccess {
  data: Competency!
}

union MutationDeleteEducationResult = MutationDeleteEducationSuccess

type MutationDeleteEducationSuccess {
  data: Education!
}

union MutationRenameCompetencyResult =
    InputError
  | MutationRenameCompetencySuccess
  | UnauthorizedError

type MutationRenameCompetencySuccess {
  data: Competency!
}

union MutationSwapCompetenciesResult =
    InputError
  | MutationSwapCompetenciesSuccess
  | UnauthorizedError

type MutationSwapCompetenciesSuccess {
  data: MutationSwapCompetenciesSuccessData!
}

type MutationSwapCompetenciesSuccessData {
  left: Competency!
  right: Competency!
}

union MutationUpdateEducationResult = MutationUpdateEducationSuccess

type MutationUpdateEducationSuccess {
  data: Education!
}

"""
A node is any resource that can be identified via an ID.
"""
interface Node {
  """
  A CUID for a resource
  """
  id: ID!
}

type NotFoundError implements UserError {
  code: String!
  message: String!
  path: [String!]
}

interface Person implements Node {
  displayName: String!
  firstName: String!

  """
  A CUID for a resource
  """
  id: ID!
  lastName: String!
}

type Query {
  allCompetencyFrameworks: [CompetencyFramework!]!
  allEducations: [Education!]!
  allPeople: [Person!]!
  allRootCompetencies: [Competency!]!
  competency(id: ID!): Competency
  competencyFramework(id: ID!): CompetencyFramework
}

input RenameCompetencyInput {
  title: String!
}

type Teacher implements Node & Person {
  displayName: String!
  firstName: String!

  """
  A CUID for a resource
  """
  id: ID!
  lastName: String!
}

type UnauthorizedError implements UserError {
  code: String!
  message: String!
  path: [String!]
}

interface UserError {
  code: String!
  message: String!
  path: [String!]
}
