generator client {
  previewFeatures = ["metrics"]
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  NL
  EN
}

model Competency {
  id String @id @default(cuid())

  createdAt   DateTime @default(now())
  createdBy   User?    @relation("CompetencyToUserCreated", fields: [createdById], references: [id])
  createdById String?
  sort        Int      @default(autoincrement())
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("CompetencyToUserUpdated", fields: [updatedById], references: [id])
  updatedById String?

  framework          CompetencyFramework @relation(fields: [frameworkId], references: [id])
  frameworkId        String
  subCompetencies    Competency[]        @relation("CompetencyToCompetency")
  parentCompetency   Competency?         @relation("CompetencyToCompetency", fields: [parentCompetencyId], onDelete: Cascade, references: [id])
  parentCompetencyId String?

  translations CompetencyTranslation[]
}

model CompetencyTranslation {
  id           String     @id @default(cuid())
  competency   Competency @relation(fields: [competencyId], onDelete: Cascade, references: [id])
  competencyId String
  languageCode Language

  title String

  @@unique([competencyId, languageCode])
}

model CompetencyFramework {
  id String @id @default(cuid())

  createdAt   DateTime @default(now())
  createdBy   User?    @relation("CompetencyFrameworkToUserCreated", fields: [createdById], references: [id])
  createdById String?
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("CompetencyFrameworkToUserUpdated", fields: [updatedById], references: [id])
  updatedById String?

  competencies Competency[]
  translations CompetencyFrameworkTranslation[]
}

model CompetencyFrameworkTranslation {
  id           String              @id @default(cuid())
  framework    CompetencyFramework @relation(fields: [frameworkId], onDelete: Cascade, references: [id])
  frameworkId  String
  languageCode Language

  title String

  @@unique([frameworkId, languageCode])
}

model Course {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  internships Internship[]
}

model Education {
  id String @id @default(cuid())

  createdAt   DateTime @default(now())
  createdBy   User?    @relation("EducationToUserCreated", fields: [createdById], references: [id])
  createdById String?
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("EducationToUserUpdated", fields: [updatedById], references: [id])
  updatedById String?

  translations EducationTranslation[]
}

model EducationTranslation {
  id           String    @id @default(cuid())
  education    Education @relation(fields: [educationId], onDelete: Cascade, references: [id])
  educationId  String
  languageCode Language

  title String

  @@unique([educationId, languageCode])
}

model Internship {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availablePositions  InternshipPosition[]
  course              Course               @relation(fields: [courseId], references: [id], onDelete: Restrict)
  courseId            String
  internshipInstances InternshipInstance[]
}

model InternshipInstance {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  internship   Internship @relation(fields: [internshipId], references: [id], onDelete: Restrict)
  internshipId String
  student      User?      @relation("InternshipInstanceToStudent", fields: [studentId], references: [id])
  studentId    String?
}

model InternshipPosition {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  internships    Internship[]
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Restrict)
  organisationId String

  description String
}

model Organisation {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  internshipPositions InternshipPosition[]

  name String
}

model User {
  id String @id

  competenciesCreated Competency[] @relation("CompetencyToUserCreated")
  competenciesUpdated Competency[] @relation("CompetencyToUserUpdated")

  competencyFrameworksCreated CompetencyFramework[] @relation("CompetencyFrameworkToUserCreated")
  competencyFrameworksUpdated CompetencyFramework[] @relation("CompetencyFrameworkToUserUpdated")

  educationsCreated Education[] @relation("EducationToUserCreated")
  educationsUpdated Education[] @relation("EducationToUserUpdated")

  internshipInstanceToStudent InternshipInstance[] @relation("InternshipInstanceToStudent")

  name String
}
