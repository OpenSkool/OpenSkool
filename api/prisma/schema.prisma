datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  previewFeatures = ["metrics"]
  provider        = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../../node_modules/@pothos/plugin-prisma/generated.ts"
}

enum Language {
  NL
  EN
}

model Competency {
  id String @id @default(cuid())

  createdAt   DateTime @default(now())
  createdById String?
  sort        Int      @default(autoincrement())
  updatedAt   DateTime @updatedAt
  updatedById String?

  framework          CompetencyFramework @relation(fields: [frameworkId], references: [id])
  frameworkId        String
  subCompetencies    Competency[]        @relation("CompetencyToCompetency")
  parentCompetency   Competency?         @relation("CompetencyToCompetency", fields: [parentCompetencyId], onDelete: Cascade, references: [id])
  parentCompetencyId String?

  translations CompetencyTranslation[]
}

model CompetencyTranslation {
  id           String     @id @default(cuid())
  competency   Competency @relation(fields: [competencyId], onDelete: Cascade, references: [id])
  competencyId String
  languageCode Language

  title String

  @@unique([competencyId, languageCode])
}

model CompetencyFramework {
  id String @id @default(cuid())

  createdAt   DateTime @default(now())
  createdById String?
  updatedAt   DateTime @updatedAt
  updatedById String?

  competencies Competency[]
  translations CompetencyFrameworkTranslation[]
}

model CompetencyFrameworkTranslation {
  id           String              @id @default(cuid())
  framework    CompetencyFramework @relation(fields: [frameworkId], onDelete: Cascade, references: [id])
  frameworkId  String
  languageCode Language

  title String

  @@unique([frameworkId, languageCode])
}

model Course {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  internships Internship[]
}

model Education {
  id String @id @default(cuid())

  createdAt   DateTime @default(now())
  createdById String?
  updatedAt   DateTime @updatedAt
  updatedById String?

  internships Internship[]

  translations EducationTranslation[]
}

model EducationTranslation {
  id           String    @id @default(cuid())
  education    Education @relation(fields: [educationId], onDelete: Cascade, references: [id])
  educationId  String
  languageCode Language

  title String

  @@unique([educationId, languageCode])
}

model Internship {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availablePositions  InternshipPosition[]
  course              Course               @relation(fields: [courseId], references: [id], onDelete: Restrict)
  courseId            String
  education           Education            @relation(fields: [educationId], references: [id])
  educationId         String
  internshipInstances InternshipInstance[]

  dateFrom         DateTime
  dateTo           DateTime
  descriptionLong  String
  descriptionShort String
  title            String
}

model InternshipApplication {
  instance   InternshipInstance @relation(fields: [instanceId], references: [id])
  instanceId String
  position   InternshipPosition @relation(fields: [positionId], references: [id])
  positionId String

  variantType  InternshipApplicationVariant
  variantValue Json

  @@id([instanceId, positionId])
}

enum InternshipApplicationVariant {
  Priority
}

model InternshipInstance {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications       InternshipApplication[]
  assignedPosition   InternshipPosition?     @relation(fields: [assignedPositionId], references: [id])
  assignedPositionId String?                 @unique
  internship         Internship              @relation(fields: [internshipId], references: [id], onDelete: Restrict)
  internshipId       String
  studentId          String?
}

model InternshipPosition {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications     InternshipApplication[]
  assignedInstance InternshipInstance?
  internships      Internship[]
  mentors          InternshipPositionMentor[]
  organisation     Organisation?              @relation(fields: [organisationId], references: [id], onDelete: Restrict)
  organisationId   String?

  description String
}

model InternshipPositionMentor {
  id String @id @default(cuid())

  position   InternshipPosition @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId String
  userId     String?
}

model Organisation {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  internshipPositions InternshipPosition[]

  name String
}
