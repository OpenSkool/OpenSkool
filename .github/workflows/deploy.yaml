name: Publish & Deploy

on:
  push:
    branches:
      - infrastructure
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build & Push
    outputs:
      apiImageSha: ${{ steps.metaOutput.outputs.apiImageSha }}
      appImageSha: ${{ steps.metaOutput.outputs.appImageSha }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build:
          - id: api
            image: os-api
            workspace: api
          - id: app
            image: os-app
            workspace: app
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.build.id }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.build.id }}-buildx-

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            registry.digitalocean.com/openskool/${{ matrix.build.image }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'infrastructure') || github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Docker Metadata Sha
        id: metaSha
        uses: docker/metadata-action@v4
        with:
          images: |
            registry.digitalocean.com/openskool/${{ matrix.build.image }}
          tags: |
            type=sha

      - id: metaOutput
        name: Docker Metadata Sha Output
        run: echo '::set-output name=${{ matrix.build.id }}ImageSha::${{ steps.metaSha.outputs.version }}'

      - name: Log in to DigitalOcean
        run: doctl registry login --expiry-seconds 1200

      - name: Build & Push
        uses: docker/build-push-action@v3
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          context: .
          file: ${{ matrix.build.workspace }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    if: github.event_name != 'pull_request'
    name: Deploy Api & App
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean
        run: doctl registry login --expiry-seconds 1200

      - name: Save kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 os-dev

      - name: Deploy Api
        run: cat $GITHUB_WORKSPACE/infrastructure/api.yaml | sed "s/:latest/:${{ needs.build.outputs.apiImageSha }}/g" | kubectl apply -f -

      - name: Verify Api
        run: kubectl rollout status deployment/os-dev-api

      - name: Deploy App
        run: cat $GITHUB_WORKSPACE/infrastructure/app.yaml | sed "s/:latest/:${{ needs.build.outputs.appImageSha }}/g" | kubectl apply -f -

      - name: Verify App
        run: kubectl rollout status deployment/os-dev-app
